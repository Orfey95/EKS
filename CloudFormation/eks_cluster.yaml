AWSTemplateFormatVersion: 2010-09-09

Parameters:

  eksClusterName:
    Type: String
    Default: myEKS
    Description: Enter EKS cluster name.

  eksNodeGroupName:
    Type: String
    Default: myEKSNodeGroup1
    Description: Enter EKS node group name.

  eksSSHKey:
    Type: String
    Default: CloudFormationKey
    Description: The key used to access the instance.

  eksNodeGroupAMIType:
    Type: String
    Default: AL2_x86_64
    Description: Enter EKS node group AMI type.

  eksNodeGroupInstanceType:
    Type: String
    Default: t2.micro
    Description: Enter EKS node group instance type.

  eksNodeGroupCapacityType:
    Type: String
    Default: SPOT
    Description: Enter EKS node group capacity type.

  eksNodeGroupMinSize:
    Type: String
    Default: 1
    Description: Enter EKS node group minimal number of nodes.

  eksNodeGroupDesiredSize:
    Type: String
    Default: 2
    Description: Enter EKS node group desired number of nodes.

  eksNodeGroupMaxSize:
    Type: String
    Default: 3
    Description: Enter EKS node group maximal number of nodes.

Resources:

############### NETWORK ####################

  eksVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: eks-VPC
        - Key: Project
          Value: aws-eks

  eksInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: eks-InternetGateway
        - Key: Project
          Value: aws-eks

  eksVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref eksInternetGateway
      VpcId: !Ref eksVPC

  eksPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref eksVPC
      Tags:
        - Key: Name
          Value: eks-RouteTable
        - Key: Project
          Value: aws-eks

  eksPublicRoute:
    DependsOn: eksVPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref eksPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref eksInternetGateway

  eksPublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: eksVPC
      Tags:
        - Key: Name
          Value: eks-PublicSubnet01
        - Key: Project
          Value: aws-eks
  
  eksPublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: eksVPC
      Tags:
        - Key: Name
          Value: eks-PublicSubnet02
        - Key: Project
          Value: aws-eks

  eksPublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref eksPublicSubnet01
      RouteTableId: !Ref eksPublicRouteTable

  eksPublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref eksPublicSubnet02
      RouteTableId: !Ref eksPublicRouteTable

  eksSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref eksVPC
      Tags:
        - Key: Name
          Value: eks-SecurityGroup
        - Key: Project
          Value: aws-eks

############### Cluster ####################

  eksIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - eks.amazonaws.com
            Action:
            - sts:AssumeRole
      RoleName: EKSClusterRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  eksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref eksClusterName
      Version: 1.18
      RoleArn: !GetAtt eksIAMRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref eksSecurityGroup
        SubnetIds:
          - !Ref eksPublicSubnet01
          - !Ref eksPublicSubnet02
    DependsOn: [eksIAMRole, eksPublicSubnet01, eksPublicSubnet02, eksSecurityGroup]

############### Nodes ####################

  eksNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Path: /

  eksNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref eksClusterName
      NodeRole: !GetAtt eksNodeInstanceRole.Arn
      AmiType: !Ref eksNodeGroupAMIType
      CapacityType: !Ref eksNodeGroupCapacityType
      InstanceTypes: 
        - !Ref eksNodeGroupInstanceType
      NodegroupName: !Ref eksNodeGroupName
      RemoteAccess:
        Ec2SshKey: !Ref eksSSHKey
      ScalingConfig:
        MinSize: !Ref eksNodeGroupMinSize
        DesiredSize: !Ref eksNodeGroupDesiredSize
        MaxSize: !Ref eksNodeGroupMaxSize
      Labels:
        Project: aws-eks
      Subnets:
        - !Ref eksPublicSubnet01
        - !Ref eksPublicSubnet02
    DependsOn: [eksCluster, eksNodeInstanceRole]

Outputs:

  EKSClusterEndpoint:
    Description: The endpoint of EKS cluster
    Value: !GetAtt eksCluster.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-Cluster-Endpoint"
